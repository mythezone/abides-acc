@startuml
class POVMarketMakerAgent {
  + __init__()
  + initialiseState() : "Returns variables that keep track of whether spread and transacted volume have been observed."
  + validateAnchor() : "Checks that input parameter anchor takes allowed value, raises ValueError if not.

:param anchor: str
:return:"
  + kernelStarting()
  + wakeup() : "Agent wakeup is determined by self.wake_up_freq"
  + receiveMessage() : "Processes message from exchange. Main function is to update orders in orderbook relative to mid-price.

:param simulation current time
:param message received by self from ExchangeAgent

:type currentTime: pd.Timestamp
:type msg: str

:return:"
  + updateOrderSize() : "Updates size of order to be placed."
  + computeOrdersToPlace() : "Given a mid price, computes the orders that need to be removed from orderbook, and adds these orders to
    bid and ask deques.

:param mid: mid-price
:type mid: int

:return:"
  + placeOrders() : "Given a mid-price, compute new orders that need to be placed, then send the orders to the Exchange.

:param mid: mid-price
:type mid: int"
  + getWakeFrequency() : "Get time increment corresponding to wakeup period."
  + cancelAllOrders() : "Cancels all resting limit orders placed by the market maker"
}
TradingAgent <|-- POVMarketMakerAgent
@enduml