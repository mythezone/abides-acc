@startuml
skinparam classAttributeIconSize 0

'' ===== From: Kernel =====
class Kernel {
  + __init__()
  + runner()
  + sendMessage()
  + setWakeup()
  + getAgentComputeDelay()
  + setAgentComputeDelay()
  + delayAgent()
  + findAgentByType()
  + writeLog()
  + appendSummaryLog()
  + writeSummaryLog()
  + updateAgentState()
  + fmtTime()
}

'' ===== From: agent/Agent =====
package agent {
class Agent {
  + __init__()
  + kernelInitializing()
  + kernelStarting()
  + kernelStopping()
  + kernelTerminating()
  + logEvent()
  + receiveMessage()
  + wakeup()
  + sendMessage()
  + setWakeup()
  + getComputationDelay()
  + setComputationDelay()
  + delay()
  + writeLog()
  + updateAgentState()
  + __lt__()
}
}

'' ===== From: agent/ExchangeAgent =====
package agent {
class ExchangeAgent {
  + __init__()
  + kernelInitializing()
  + kernelTerminating()
  + receiveMessage()
  + updateSubscriptionDict()
  + publishOrderBookData()
  + logOrderBookSnapshots()
  + sendMessage()
  + getMarketOpen()
  + getMarketClose()
}
FinancialAgent <|-- ExchangeAgent
}

'' ===== From: agent/FinancialAgent =====
package agent {
class FinancialAgent {
  + __init__()
  + dollarize()
}
Agent <|-- FinancialAgent
}

'' ===== From: agent/FundamentalTrackingAgent =====
package agent {
class FundamentalTrackingAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + measureFundamental()
  + wakeup()
  + writeFundamental()
  + getWakeFrequency()
}
TradingAgent <|-- FundamentalTrackingAgent
}

'' ===== From: agent/HeuristicBeliefLearningAgent =====
package agent {
class HeuristicBeliefLearningAgent {
  + __init__()
  + wakeup()
  + placeOrder()
  + receiveMessage()
}
ZeroIntelligenceAgent <|-- HeuristicBeliefLearningAgent
}

'' ===== From: agent/NoiseAgent =====
package agent {
class NoiseAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + wakeup()
  + placeOrder()
  + receiveMessage()
  + cancelOrders()
  + getWakeFrequency()
}
TradingAgent <|-- NoiseAgent
}

'' ===== From: agent/OrderBookImbalanceAgent =====
package agent {
class OrderBookImbalanceAgent {
  + __init__()
  + kernelStarting()
  + wakeup()
  + receiveMessage()
  + getWakeFrequency()
  + computeRequiredPrice()
  + cancelOrders()
  + kernelTerminating()
}
TradingAgent <|-- OrderBookImbalanceAgent
}

'' ===== From: agent/TradingAgent =====
package agent {
class TradingAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + wakeup()
  + requestDataSubscription()
  + cancelDataSubscription()
  + receiveMessage()
  + getLastTrade()
  + getCurrentSpread()
  + getOrderStream()
  + get_transacted_volume()
  + placeLimitOrder()
  + placeMarketOrder()
  + cancelOrder()
  + modifyOrder()
  + orderExecuted()
  + orderAccepted()
  + orderCancelled()
  + marketClosed()
  + queryLastTrade()
  + querySpread()
  + handleMarketData()
  + queryOrderStream()
  + query_transacted_volume()
  + getKnownBidAsk()
  + getKnownLiquidity()
  + getBookLiquidity()
  + markToMarket()
  + getHoldings()
  + getKnownBidAskMidpoint()
  + get_average_transaction_price()
  + fmtHoldings()
}
FinancialAgent <|-- TradingAgent
}

'' ===== From: agent/ValueAgent =====
package agent {
class ValueAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + wakeup()
  + updateEstimates()
  + placeOrder()
  + receiveMessage()
  + cancelOrders()
  + getWakeFrequency()
}
TradingAgent <|-- ValueAgent
}

'' ===== From: agent/ZeroIntelligenceAgent =====
package agent {
class ZeroIntelligenceAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + wakeup()
  + updateEstimates()
  + placeOrder()
  + receiveMessage()
  + cancelOrders()
  + getWakeFrequency()
}
TradingAgent <|-- ZeroIntelligenceAgent
}

'' ===== From: agent/etf/EtfArbAgent =====
package agent.etf {
class EtfArbAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + wakeup()
  + getPriceEstimates()
  + placeOrder()
  + receiveMessage()
  + cancelOrders()
  + getWakeFrequency()
}
TradingAgent <|-- EtfArbAgent
}

'' ===== From: agent/etf/EtfMarketMakerAgent =====
package agent.etf {
class EtfMarketMakerAgent {
  + __init__()
  + kernelStarting()
  + wakeup()
  + placeOrder()
  + decideBasket()
  + receiveMessage()
  + getEtfNav()
  + placeBasketOrder()
  + queryEtfNav()
}
EtfArbAgent <|-- EtfMarketMakerAgent
}

'' ===== From: agent/etf/EtfPrimaryAgent =====
package agent.etf {
class EtfPrimaryAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + wakeup()
  + receiveMessage()
  + queryLastTrade()
  + getLastTrade()
  + getPrimeOpen()
  + getPrimeClose()
}
FinancialAgent <|-- EtfPrimaryAgent
}

'' ===== From: agent/examples/ExampleExperimentalAgent =====
package agent.examples {
class ExampleExperimentalAgent {
  + __init__()
  + getCurrentMidPrice()
  + receiveMessage()
  + computeMidPriceMovingAverages()
  + wakeup()
  + getWakeFrequency()
}
ExampleExperimentalAgentTemplate <|-- ExampleExperimentalAgent
}

'' ===== From: agent/examples/ExampleExperimentalAgentTemplate =====
package agent.examples {
class ExampleExperimentalAgentTemplate {
  + __init__()
  + wakeup()
  + receiveMessage()
  + getWakeFrequency()
  + placeLimitOrder()
  + placeMarketOrder()
  + cancelAllOrders()
}
SubscriptionAgent <|-- ExampleExperimentalAgentTemplate
}

'' ===== From: agent/examples/ImpactAgent =====
package agent.examples {
class ImpactAgent {
  + __init__()
  + wakeup()
  + receiveMessage()
  + placeLimitOrder()
  + computeRequiredPrice()
  + getLastTrade()
  + getCurrentSpread()
  + getWakeFrequency()
}
TradingAgent <|-- ImpactAgent
}

'' ===== From: agent/examples/L3OrdersProcessor =====
package agent.examples {
class L3OrdersProcessor {
  - COLUMNS
  - DIRECTION
  + __init__()
  + processOrders()
}
}

'' ===== From: agent/examples/MarketReplayAgent =====
package agent.examples {
class MarketReplayAgent {
  + __init__()
  + wakeup()
  + receiveMessage()
  + placeOrder()
  + getWakeFrequency()
}
TradingAgent <|-- MarketReplayAgent
}

'' ===== From: agent/examples/MomentumAgent =====
package agent.examples {
class MomentumAgent {
  + __init__()
  + kernelStarting()
  + wakeup()
  + receiveMessage()
  + placeOrders()
  + getWakeFrequency()
  + ma()
}
TradingAgent <|-- MomentumAgent
}

'' ===== From: agent/examples/QLearningAgent =====
package agent.examples {
class QLearningAgent {
  + __init__()
  + kernelStopping()
  + wakeup()
  + placeOrder()
  + receiveMessage()
  + cancelOrders()
  + getWakeFrequency()
}
TradingAgent <|-- QLearningAgent
}

'' ===== From: agent/examples/SubscriptionAgent =====
package agent.examples {
class SubscriptionAgent {
  + __init__()
  + kernelStarting()
  + wakeup()
  + receiveMessage()
  + getWakeFrequency()
}
TradingAgent <|-- SubscriptionAgent
}

'' ===== From: agent/examples/SumClientAgent =====
package agent.examples {
class SumClientAgent {
  + __init__()
  + kernelStarting()
  + wakeup()
  + receiveMessage()
}
Agent <|-- SumClientAgent
}

'' ===== From: agent/examples/SumServiceAgent =====
package agent.examples {
class SumServiceAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + receiveMessage()
  + processSum()
}
Agent <|-- SumServiceAgent
}

'' ===== From: agent/examples/crypto/PPFL_ClientAgent =====
package agent.examples.crypto {
class PPFL_ClientAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + wakeup()
  + receiveMessage()
}
Agent <|-- PPFL_ClientAgent
}

'' ===== From: agent/examples/crypto/PPFL_ServiceAgent =====
package agent.examples.crypto {
class PPFL_ServiceAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + receiveMessage()
  + combineWeights()
}
Agent <|-- PPFL_ServiceAgent
}

'' ===== From: agent/examples/crypto/PPFL_TemplateClientAgent =====
package agent.examples.crypto {
class PPFL_TemplateClientAgent {
  + __init__()
  + kernelStarting()
  + kernelStopping()
  + wakeup()
  + receiveMessage()
}
Agent <|-- PPFL_TemplateClientAgent
}

'' ===== From: agent/execution/ExecutionAgent =====
package agent.execution {
class ExecutionAgent {
  + __init__()
  + kernelStopping()
  + wakeup()
  + receiveMessage()
  + handleOrderExecution()
  + handleOrderAcceptance()
  + placeOrders()
  + cancelOrders()
  + getWakeFrequency()
}
TradingAgent <|-- ExecutionAgent
}

'' ===== From: agent/execution/POVExecutionAgent =====
package agent.execution {
class POVExecutionAgent {
  + __init__()
  + processEndTime()
  + wakeup()
  + getWakeFrequency()
  + receiveMessage()
  + handleOrderAcceptance()
  + handleOrderExecution()
  + cancelOrders()
}
TradingAgent <|-- POVExecutionAgent
}

'' ===== From: agent/execution/TWAPExecutionAgent =====
package agent.execution {
class TWAPExecutionAgent {
  + __init__()
  + generate_schedule()
}
ExecutionAgent <|-- TWAPExecutionAgent
}

'' ===== From: agent/execution/VWAPExecutionAgent =====
package agent.execution {
class VWAPExecutionAgent {
  + __init__()
  + generate_schedule()
  + synthetic_volume_profile()
}
ExecutionAgent <|-- VWAPExecutionAgent
}

'' ===== From: agent/market_makers/AdaptiveMarketMakerAgent =====
package agent.market_makers {
class AdaptiveMarketMakerAgent {
  + __init__()
  + initialiseState()
  + validateAnchor()
  + validateWindowSize()
  + kernelStarting()
  + wakeup()
  + receiveMessage()
  + _adaptive_update_spread()
  + _adaptive_update_window_and_tick_size()
  + updateOrderSize()
  + computeOrdersToPlace()
  + placeOrders()
  + getWakeFrequency()
  + cancelAllOrders()
}
TradingAgent <|-- AdaptiveMarketMakerAgent
}

'' ===== From: agent/market_makers/MarketMakerAgent =====
package agent.market_makers {
class MarketMakerAgent {
  + __init__()
  + kernelStarting()
  + wakeup()
  + receiveMessage()
  + placeOrders()
  + cancelOrders()
  + getWakeFrequency()
}
TradingAgent <|-- MarketMakerAgent
}

'' ===== From: agent/market_makers/POVMarketMakerAgent =====
package agent.market_makers {
class POVMarketMakerAgent {
  + __init__()
  + initialiseState()
  + validateAnchor()
  + kernelStarting()
  + wakeup()
  + receiveMessage()
  + updateOrderSize()
  + computeOrdersToPlace()
  + placeOrders()
  + getWakeFrequency()
  + cancelAllOrders()
}
TradingAgent <|-- POVMarketMakerAgent
}

'' ===== From: agent/market_makers/SpreadBasedMarketMakerAgent =====
package agent.market_makers {
class SpreadBasedMarketMakerAgent {
  - _Order
  + __init__()
  + validateAnchor()
  + kernelStarting()
  + wakeup()
  + receiveMessage()
  + computeOrdersToCancel()
  + cancelOrders()
  + computeOrdersToPlace()
  + placeOrders()
  + initialiseBidsAsksDeques()
  + generateNewOrderId()
  + getWakeFrequency()
  + cancelAllOrders()
}
TradingAgent <|-- SpreadBasedMarketMakerAgent
}

'' ===== From: contributed_traders/SimpleAgent =====
package contributed_traders {
class SimpleAgent {
  + __init__()
  + kernelStarting()
  + wakeup()
  + dump_shares()
  + receiveMessage()
  + getWakeFrequency()
}
TradingAgent <|-- SimpleAgent
}

'' ===== From: message/Message =====
package message {
class Message {
  - uniq
  + __init__()
  + __lt__()
  + __str__()
}
}

'' ===== From: message/MessageType =====
package message {
class MessageType {
  - MESSAGE
  - WAKEUP
  + __lt__()
}
Enum <|-- MessageType
}

'' ===== From: model/LatencyModel =====
package model {
class LatencyModel {
  + __init__()
  + get_latency()
  + _extract()
}
}

'' ===== From: realism/Constants =====
package realism {
class Constants {
  - fig_height
  - fig_width
  - tick_label_size
  - legend_font_size
  - axes_label_font_size
  - title_font_size
  - scatter_marker_styles_sizes
  - interarrival_times_xlabel
  - interarrival_times_ylabel
  - interarrival_times_filename
  - interarrival_fit_lower_bound
  - interarrival_fit_upper_bound
  - interarrival_linewidth
  - binned_trade_counts_xlabel
  - binned_trade_counts_ylabel
  - binned_trade_counts_filename
  - binned_count_linewidth
  - intraday_volume_filename
  - intraday_volume_linewidth
}
}

'' ===== From: realism/metrics/AggregationNormality =====
package realism.metrics {
class AggregationNormality {
  + __init__()
  + compute()
  + visualize()
}
Metric <|-- AggregationNormality
}

'' ===== From: realism/metrics/Autocorrelation =====
package realism.metrics {
class Autocorrelation {
  + __init__()
  + compute()
  + visualize()
}
Metric <|-- Autocorrelation
}

'' ===== From: realism/metrics/Kurtosis =====
package realism.metrics {
class Kurtosis {
  + __init__()
  + compute()
  + visualize()
}
Metric <|-- Kurtosis
}

'' ===== From: realism/metrics/Metric =====
package realism.metrics {
class Metric {
  + compute()
  + visualize()
  + hist()
  + line()
}
}

'' ===== From: realism/metrics/MinutelyReturns =====
package realism.metrics {
class MinutelyReturns {
  + compute()
  + visualize()
}
Metric <|-- MinutelyReturns
}

'' ===== From: realism/metrics/ReturnsVolatilityCorrelation =====
package realism.metrics {
class ReturnsVolatilityCorrelation {
  + __init__()
  + compute()
  + visualize()
}
Metric <|-- ReturnsVolatilityCorrelation
}

'' ===== From: realism/metrics/VolatilityClustering =====
package realism.metrics {
class VolatilityClustering {
  + __init__()
  + compute()
  + visualize()
}
Metric <|-- VolatilityClustering
}

'' ===== From: realism/metrics/VolumeVolatilityCorrelation =====
package realism.metrics {
class VolumeVolatilityCorrelation {
  + __init__()
  + compute()
  + visualize()
}
Metric <|-- VolumeVolatilityCorrelation
}

'' ===== From: util/OrderBook =====
package util {
class OrderBook {
  + __init__()
  + handleLimitOrder()
  + handleMarketOrder()
  + executeOrder()
  + isMatch()
  + enterOrder()
  + cancelOrder()
  + modifyOrder()
  + getInsideBids()
  + getInsideAsks()
  + _get_recent_history()
  + _update_unrolled_transactions()
  + _unrolled_transactions_from_order_history()
  + get_transacted_volume()
  + isBetterPrice()
  + isEqualPrice()
  + isSameOrder()
  + book_log_to_df()
  + prettyPrint()
}
}

'' ===== From: util/formatting/Oracle =====
package util.formatting {
class Oracle {
  - COLUMNS
  - DIRECTION
  + __init__()
  + processOrders()
}
}

'' ===== From: util/model/QTable =====
package util.model {
class QTable {
  + __init__()
}
}

'' ===== From: util/oracle/DataOracle =====
package util.oracle {
class DataOracle {
  + __init__()
  + getDailyOpenPrice()
  + getLatestTrade()
  + observePrice()
}
}

'' ===== From: util/oracle/ExternalFileOracle =====
package util.oracle {
class ExternalFileOracle {
  + __init__()
  + load_fundamentals()
  + getDailyOpenPrice()
  + getPriceAtTime()
  + observePrice()
  + getInterpolatedPrice()
}
}

'' ===== From: util/oracle/MeanRevertingOracle =====
package util.oracle {
class MeanRevertingOracle {
  + __init__()
  + generate_fundamental_value_series()
  + getDailyOpenPrice()
  + observePrice()
}
}

'' ===== From: util/oracle/SparseMeanRevertingOracle =====
package util.oracle {
class SparseMeanRevertingOracle {
  + __init__()
  + compute_fundamental_at_timestamp()
  + advance_fundamental_value_series()
  + getDailyOpenPrice()
  + observePrice()
}
MeanRevertingOracle <|-- SparseMeanRevertingOracle
}

'' ===== From: util/order/LimitOrder =====
package util.order {
class LimitOrder {
  + __init__()
  + __str__()
  + __repr__()
  + __copy__()
  + __deepcopy__()
}
Order <|-- LimitOrder
}

'' ===== From: util/order/MarketOrder =====
package util.order {
class MarketOrder {
  + __init__()
  + __str__()
  + __repr__()
  + __copy__()
  + __deepcopy__()
}
Order <|-- MarketOrder
}

'' ===== From: util/order/Order =====
package util.order {
class Order {
  - order_id
  - _order_ids
  + __init__()
  + generateOrderId()
  + to_dict()
  + __copy__()
  + __deepcopy__()
}
}

'' ===== From: util/order/etf/BasketOrder =====
package util.order.etf {
class BasketOrder {
  + __init__()
  + __str__()
  + __repr__()
}
Order <|-- BasketOrder
}

'' ===== From: util/plotting/Constants =====
package util.plotting {
class Constants {
  - fig_width
  - fig_height
  - tick_label_size
  - axes_label_font_size
  - title_font_size
  - legend_font_size
  - filename
}
}

@enduml